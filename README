NAME
    helm - Easy server and cluster automation

SYNOPSIS
        helm TASK [OPTIONS]

        # patch the same file on all of the machines in your cluster 
        helm patch --file my_fix.patch --target /opt/cool_system/do_stuff.pl

        # run a command on only the servers which run memcache
        helm run --command "pidof memcached" --roles memcache 

        # copy a file to ever server in your cluster
        helm put --local foo.tar.gz --remote /tmp/bar.tar.gz

        # rsync a local folder to specific servers
        helm rsync_put --local lib/important --remote /tmp/important_libs --servers web1,web2,web4

DESCRIPTION
    "helm" is command-line utility to make it easy to automate system tasks
    for individual machines, a cluster of machines or a subset of machines
    in a cluster. It has the following features:

    *   Combine multiple commands into a single tasks and to have groups of
        related tasks gathered together.

    *   Uses SSH as the transport layer for tasks and uses SSH keys for
        automatic authorization.

    *   Simple optional configuration file describing your cluster, allowing
        tasks to target a single machine, multiple machines which share the
        same role, or all machines in your cluster. Can also be extended to
        pull configuration from more complicated sources like LDAP, etc.

    *   Send notifications of each action performed to multiple channels:
        log file, irc, email, etc.

    *   Interact with the remote processes via "STDIN", "STDOUT" and
        "STDERR".

    *   Convenient .helmrc file to reduce the number of options you need to
        pass on every invocation of "helm".

    *   Default locking on the client and server so that multiple
        invocations of "helm" aren't running at the same time.

OPTIONS
    "helm" has several options that can be specified for all commands. Any
    remaining arguments are passed to the task that was invoked. These
    global options are:

    --servers
        Specifically list out the hostnames of the servers to send the task
        to. These can either be full hostnames (or an unambiguous
        abbreviation of your servers as defined in your CONFIGURATION).
        Multiple hostnames must me specified in a comma separated list.

        If no servers (or roles) are specified, then the task will be
        performed on all servers (as defined in your CONFIGURATION).

            # using full hostnames 
            --servers 192.168.0.23,192.168.0.24,web1.company.com

            # using abbreviations from config file 
            --servers web1,web2,web3

    --roles
        Instead of specifying the servers explicitly, you can instead
        specify which server roles you want to target (as defined in your
        CONFIGURATION). Multiple roles must be specified in a comma
        separated list.

        If no roles (or servers) are specified, then the task will be
        performed on all servers (as defined in your CONFIGURATION).

            # single role 
            --roles web

            # multiple roles
            --roles web,cache

    --config
        Which resource to use for pulling cluster configuration information
        (see CONFIGURATION).

            --config file:///etc/helm.conf

    --notify
        Send notifications to a specific channel. Multiple channels can be
        specified by specifying this option multiple times. The value of
        this option is the URI of the channel to be used. See "NOTIFICATION
        CHANNELS" for more details.

            # send notifications to a comany tech IRC channel 
            --notify irc://irc.company.com/tech

            # send notifications to a log file and to email 
            --notify file:///var/log/helm.log --notify mailto://notifications@company.com

        Notifications are also sent to "STDERR" unless the --quite option is
        also passed.

    --notify-level
        The notification level used. Can be one of "debug", "info", "warn",
        "error", "fatal". Defaults to "info".

    --load
        Allows you to load other 3rd party plugin modules to extend "helm"
        functionality. This could be to add more notification channels,
        different configuration loading, etc. The value of this option is
        the full Perl module name of the plugin. This can be specified
        multiple times.

            # load a hypothetical Twitter notification plugin 
            --load Helm::Notify::Twitter

            # load hypothetical custom LDAP configuration and Ruby execution plugins 
            --load Helm::Conf::Loader::CompanyLDAP --load Helm::Conf::Task::Execute::Ruby

    --noenv
        Suppress the default loading of the ".helmrc file" file.

    --quiet
        Suppress the default notification to "STDERR"

    --help
        Display the synopsis

    --man
        Display this documentation

    --version
        Display the version of Helm installed

    --dump-config
        Display a dump of the configuration data as understood by Helm

TASKS
CONFIGURATION
    By default, "helm" doesn't use a configuration file, but certain
    features require it (using roles, server abbreviations, etc) so it's
    best to have one. You can tell "helm" which configuration resource to
    use by using the --config option. Currently, only the "file://" URI
    scheme is supported.

        --config file:///etc/helm.conf

    A configuration file will look something like this:

        <Server web[1-5].company.com>
            Role web
        </Server>

        <Server db1.company.com>
            Role db Role db_master
        </Server>

        <Server db2.company.com>
            Role db Role db_slave
        </Server>

    This configuration would define 7 servers (web1.company.com,
    web2.company.com, web3.company.com, web4.company.com, web5.company.com,
    db1.company.com and db2.company.com). It defines 4 different roles (web,
    db, db_master, db_slave).

    "helm" currently just supports a single configuration resource format
    ("file://"), but the internals are flexible enough that more formats
    could be supported in the future, including other configuration methods
    like LDAP, etc.

    If, for instance you wanted to support a URI like:

        --config ldap://ldap.company.com

    You would need to write a Perl module named "Helm::Conf::Loader::ldap"
    which subclasses "Helm::Conf::Loader".

    If you are having problems getting your configuration right, you can
    pass the --dump-config option to tell "helm" to display what it thinks
    things are configured to be.

NOTIFICATION CHANNELS
    "helm" can be told to send various levels of notification data to
    different channels. By default we support a log file, IRC and email
    notifications. We also support various notification levels (see the
    --notify-level option).

    You can specify which channel is used by giving a URI which indicates
    what type of channel and where to send the notification. The following
    URI schemes are supported:

    file://
        This is basically a log file where notifications are immediately
        appended.

            --notify file:///var/log/helm.log

    irc://
        This is an IRC channel where notifications are immediately sent. For
        instance to send notifications to the "sysadmin" IRC channel on
        "irc.company.com" using the user "michael" and the password "s3cr3t"
        you would have:

            --notify irc://michael@irc.company.com/sysadmin?pass=s3cr3t

    mailto://
        Similar to Mail-To links in HTML documents, this just specifies an
        email address to notify. Notification's aren't sent immediately, but
        are instead queued up to be sent once the command has been
        completed.

            --notify mailto://michael@company.com

    Plugins can be written to load allow other notification channels. This
    is done by subclassing Helm::Notify::Channel and naming the module with
    the scheme of the URI. So to add another channel for a URI like

        --notify twitter://m_peters

    You'd need to create a module named "Helm::Notify::twitter".

THE .helmrc FILE
    The .helmrc file contains command-line options that are prepended to the
    command line before processing. Multiple options may live on multiple
    lines. Lines beginning with a # are ignored. A .helmrc might look like
    this:

        # always log to a file 
        --notify file:///var/log/helm.log

        # always load our custom plugins 
        --load Helm::Conf::Loader::CompanyLDAP 
        --load Helm::Notify::CompanyYammer
        --load Company::CustomHelmTasks

    "helm" looks in your home directory or the current directory for the
    .helmrc. You can specify another location with the "HELMRC" environment
    variable.

    If --noenv is specified on the command line, the .helmrc file is
    ignored.

CAVEATS
    Multi-Platform
        This has been developed and tested on Linux only. Dealing with
        multiple platforms and writing multi-platform tasks has been punted
        to the future.

    Alpha Software
        This software is very ALPHA, which means it's interface is likely to
        change in the future. It's used currently and happily in production
        but please be aware if you start using it that you'll probably want
        to follow future versions carefully to make sure you aren't bitten
        by API changes as thing are flushed out.

