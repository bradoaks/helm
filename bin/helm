#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long;
use Pod::Usage;
use Helm;
use Try::Tiny;
use Cwd qw(abs_path);
use File::Spec::Functions qw(catfile);

=head1 NAME

helm - Easy server and cluster automation

=head1 SYNOPSIS

    helm TASK [OPTIONS]

    # patch the same file on all of the machines in your cluster 
    helm patch --file my_fix.patch --target /opt/cool_system/do_stuff.pl

    # run a command on only the servers which run memcache
    helm run --command "pidof memcached" --roles memcache 

    # copy a file to every server in your cluster
    helm put --local foo.tar.gz --remote /tmp/bar.tar.gz

    # rsync a local folder to specific servers
    helm rsync_put --local lib/important --remote /tmp/important_libs --servers web1,web2,web4

=head1 DESCRIPTION

C<helm> is command-line utility to make it easy to automate system tasks
for individual machines, a cluster of machines or a subset of machines
in a cluster. It has the following features:

=over

=item *

Combine multiple commands into a single tasks and to have groups of
related tasks gathered together.

=item *

Uses SSH as the transport layer for tasks and uses SSH keys for automatic
authorization.

=item *

Simple optional configuration file describing your cluster, allowing
tasks to target a single machine, multiple machines which share the
same role, or all machines in your cluster. Can also be extended to pull
configuration from more complicated sources like LDAP, etc.

=cut

#=item *
#
#Logging of each action performed to multiple channels: log
#file, irc, email, etc.

=item *

Interact with the remote processes via C<STDIN>, C<STDOUT> and C<STDERR>.

=item *

Convenient F<.helmrc> file to reduce the number of options you need to
pass on every invocation of C<helm>.

=item *

Locking on the client and/or server so that multiple invocations
of C<helm> aren't running at the same time.

=back

=cut

my $lock_type = 'none';
my $sudo      = '';
my $sleep     = 0;
my $port      = 22;
my $timeout   = 30;
my (
    @servers, @roles, $config_uri, @logs,    $log_level,   @libs, $no_rc_file,
    $quiet,   $man,   $help,       $version, $dump_config, $debug,
);

# the main task (make sure not to grab an option by mistake)
my $task = defined $ARGV[0] && $ARGV[0] !~ /^-/ ? shift @ARGV : undef;

# load the .helmrc file unless we have the --no-rc-file set
unless (grep { $_ eq '--no-rc-file' } @ARGV) {
    my $file = $ENV{HELMRC};
    # look in the current directory
    unless ($file && -e $file) {
        $file = catfile(abs_path, '.helmrc');
        undef $file unless -e $file;
    }

    if ($file) {
        open(my $FH, '<', $file) or die "Can't read $file: $!\n";
        my @lines = grep { /\S/ && !/^\s*#/ } <$FH>;
        chomp @lines;
        unshift(@ARGV, map { split(/\s+/, $_) } @lines);
    }
}

Getopt::Long::Configure('pass_through');
GetOptions(
    'servers=s'               => \@servers,
    'roles=s'                 => \@roles,
    'configuration|config=s'  => \$config_uri,
    'log-level|log_level=s'   => \$log_level,
    'log=s'                   => \@logs,
    'load=s'                  => \@libs,
    'sudo=s'                  => \$sudo,
    'lock=s'                  => \$lock_type,
    'sleep=i'                 => \$sleep,
    'port=i'                  => \$port,
    'timeout=i'               => \$timeout,
    'no-rc-file'              => \$no_rc_file,
    'quiet'                   => \$quiet,
    'man'                     => \$man,
    'h|help'                  => \$help,
    'v|version'               => \$version,
    'dump-config|dump_config' => \$dump_config,
    'debug'                   => \$debug,
) or pod2usage(2);
pod2usage(1) if $help;
pod2usage(-verbose => 2) if $man;

if( $version ) {
    print "$Helm::VERSION\n";
    exit(0);
}

if(@libs) {
    foreach my $lib (@libs) {
        eval "require $lib";
        die "Could not load library $lib: $@\n" if $@;
    }
}

if( $debug ) {
    if(!$log_level || $log_level eq 'debug') {
        $log_level = 'debug';
    } else {
        print STDERR "Can't specify --debug and --log-level at the same time\n";
        exit(1);
    }
} elsif(!$log_level) {
    $log_level = 'info';
}

# split servers and roles on commas if specified together
if(@servers) {
    @servers = map { split(/\s*,\s*/, $_) } @servers;
}
if(@roles) {
    @roles = map { split(/\s*,\s*/, $_) } @roles;
}

# look through @ARGV and get anything that looks like an option (starts with "--")
# and save it to pass through the actual task
my %extra_options;
for(my $i=0; $i<=$#ARGV; $i++) {
    my $option = $ARGV[$i];
    if( $option =~ /^-+(.*)/ ) {
        $option = $1;
        my $val = $ARGV[$i+1];
        if( ! defined $val || $val =~ /^-/ ) {
            $extra_options{$option} = 1;
        } else {
            $extra_options{$option} = $val;
            $i++;
        }
    }
}

if( $dump_config ) {
    my $main_header = "=" x 70;
    my $section_header = '-' x 50;
    if( %extra_options ) {
        warn "$main_header\nEXTRA OPTIONS\n$main_header\n";
        foreach my $key (sort keys %extra_options) {
            print "  $key -> $extra_options{$key}\n";
        }
    }
        
    die "Can't dump configuration without a --config option\n" unless $config_uri;
    my $config = try {
        Helm->load_configuration($config_uri);
    } catch {
        warn "Error: $_\n";
        exit(1);
    };
    warn "$main_header\nSERVERS\n$main_header\n";
    foreach my $server (@{$config->servers}) {
        warn "  " . $server->name() . "\n  Roles: " . join(', ', @{$server->roles}) . "\n$section_header\n";
    }

    # don't bother with anything else if we don't have a task
    exit(0) if !$task;
}

die "No task given\n" if !$task;
unshift(@logs, 'console') unless $quiet;
try {
    my $helm = Helm->new(
        task       => $task       || '',
        config_uri => $config_uri || '',
        extra_options => \%extra_options,
        servers       => \@servers,
        roles         => \@roles,
        log           => \@logs,
        log_level     => $log_level,
        sudo          => $sudo,
        lock_type     => $lock_type,
        sleep         => $sleep,
        default_port  => $port,
        timeout       => $timeout,
    );
    $helm->steer();
} catch {
    my $err = $_;
    $err =~ s/at (\S)+ line \d+$//;
    die "Error: $err";
}

=head1 OPTIONS

C<helm> has several options that can be specified for all commands. Any
remaining arguments are passed to the task that was invoked. These global
options are:

=over

=item --servers

Specifically list out the hostnames of the servers to send the task
to. These can either be full hostnames (or an unambiguous abbreviation
of your servers as defined in your L<CONFIGURATION>). Multiple hostnames
must me specified in a comma separated list.

If no servers (or roles) are specified, then the task will be performed
on all servers (as defined in your L<CONFIGURATION>).

    # using full hostnames 
    --servers 192.168.0.23,192.168.0.24,web1.company.com

    # using abbreviations from config file 
    --servers web1,web2,web3

=item --roles

Instead of specifying the servers explicitly, you can instead
specify which server roles you want to target (as defined in your
L<CONFIGURATION>). Multiple roles must be specified in a comma separated
list.

If no roles (or servers) are specified, then the task will be performed
on all servers (as defined in your L<CONFIGURATION>).

    # single role 
    --roles web

    # multiple roles
    --roles web,cache

=item --config

Which resource to use for pulling cluster configuration information (see
L<CONFIGURATION>).

    --config helm:///etc/helm.conf

=item --log-level

The log level used. Can be one of C<debug>, C<info>, C<warn>,
and C<error>.  Defaults to C<info>.

=item --log

Log messages to a specific channel. Multiple channels can be
specified by specifying this option multiple times. The value of this
option is the URI of the channel to be used.  See L<LOG CHANNELS>
for more details.

    # send log messages to a comany tech IRC channel 
    --log irc://irc.company.com/tech

    # log messages to a file and to email address
    --log file:///var/log/helm.log --log mailto://helm_log@company.com

Log messages are also sent to C<STDERR> unless the L<--quite> option
is also passed.

=item --load

Allows you to load other 3rd party plugin modules to extend C<helm>
functionality. This could be to add more log channels, different
configuration loading, etc. The value of this option is the full Perl
module name of the plugin. This can be specified multiple times.

    # load a hypothetical Twitter log plugin 
    --load Helm::Log::Channel::Twitter

    # load hypothetical custom LDAP configuration and Ruby execution plugins 
    --load Helm::Conf::Loader::CompanyLDAP --load Helm::Conf::Task::Execute::Ruby

=item --sudo

The user that should be used to perform the commands on the remote server.
The actually SSH connection will be made using the current user's SSH keys
but then once the connection is made to the remote server, it's sometimes
useful for the commands to be run as a different user. We also try to make
sure that things like file permissions (on tasks like C<put> and C<patch>)
are also handled so that the resulting files are owned by this sudo user.

=item --lock

This options allows you to have control over whether concurrent C<helm> processes
can be running on either the local or remote servers. The value can be one of: C<none>,
C<local>, C<remote>, C<both>.

=item --no-rc-file

Suppress the default loading of the L<".helmrc file"|THE .helmrc FILE>
file.

=item --port

The port to use for SSH on all of the remote servers. Defaults to the standard (22).

=item --timeout

The timeout in seconds to give the ssh connections. Default is 30 seconds.

=item --quiet

Suppress the default logging to C<STDERR>

=item --help

Display the synopsis

=item --man

Display this documentation

=item --version

Display the version of Helm installed

=item --dump-config

Display a dump of the configuration data as understood by Helm

=back

=cut

=head1 TASKS

=head1 CONFIGURATION

By default, C<helm> doesn't use a configuration file, but certain features
require it (using roles, server abbreviations, etc) so it's best to
have one. You can tell C<helm> which configuration resource to use by using
the L<--config> option. Currently, only the C<helm://> URI scheme
is supported.  

    --config helm:///etc/helm.conf

A configuration file will look something like this:

    <Server web[1-5].company.com>
        Role web
    </Server>

    <Server db1.company.com>
        Role db Role db_master
    </Server>

    <Server db2.company.com>
        Role db Role db_slave
    </Server>

This configuration would define 7 servers (web1.company.com,
web2.company.com, web3.company.com, web4.company.com, web5.company.com,
db1.company.com and db2.company.com). It defines 4 different roles (web,
db, db_master, db_slave).

C<helm> currently just supports a single configuration resource format
(C<helm://>), but the internals are flexible enough that more formats
could be supported in the future, including other configuration methods
like LDAP, etc.

If, for instance you wanted to support a URI like:

    --config ldap://ldap.company.com

You would need to write a Perl module named C<Helm::Conf::Loader::ldap>
which subclasses C<Helm::Conf::Loader>.

If you are having problems getting your configuration right, you can pass
the L<--dump-config> option to tell C<helm> to display what it thinks things
are configured to be.

=head1 LOG CHANNELS

C<helm> can be told to send various levels of log data to different
channels. By default we support a log file, IRC and email logs. We also
support various log levels (see the L<--log-level> option).

You can specify which channel is used by giving a URI which indicates
what type of channel and where to send the log. The following URI schemes
are supported:

=over

=item file://

This is basically a log file where messages are immediately appended.

    --log file:///var/log/helm.log

=item irc://

This is an IRC channel where messages are immediately sent. For example
to send messages to the C<sysadmin> IRC channel on C<irc.company.com>
using the user C<michael> and the password C<s3cr3t> you would have:

    --log irc://michael@irc.company.com/sysadmin?pass=s3cr3t

=item mailto://

Similar to Mail-To links in HTML documents, this just specifies an
email address to log. Log messages aren't sent immediately, but
are instead queued up to be sent once the command has been completed.

    --log mailto://michael@company.com

=back

Plugins can be written to load allow other log channels. This
is done by subclassing L<Helm::Log::Channel> and naming the module
with the scheme of the URI. So to add another channel for a URI like

    --log twitter://m_peters

You'd need to create a module named C<Helm::Log::Channel::twitter>.

=head1 THE .helmrc FILE

The F<.helmrc> file contains command-line options that are prepended
to the command line before processing. Multiple options may live on
multiple lines. Lines beginning with a # are ignored. A F<.helmrc>
might look like this:

    # always log to a file 
    --log file:///var/log/helm.log

    # always load our custom plugins 
    --load Helm::Conf::Loader::CompanyLDAP 
    --load Helm::Log::CompanyYammer
    --load Company::CustomHelmTasks

C<helm> looks in your home directory or the current directory for
the F<.helmrc>. You can specify another location with the C<HELMRC>
environment variable.

If L<--no-rc-file> is specified on the command line, the F<.helmrc> file
is ignored.

=head1 CAVEATS

=over 

=item Multi-Platform

This has been developed and tested on Linux (with bash as the shell
on the remote hosts) only. Dealing with multiple platforms and writing
multi-platform tasks has been punted to the future.

=item Alpha Software

This software is very ALPHA, which means it's interface is likely to
change in the future.  It's used currently and happily in production
but please be aware if you start using it that you'll probably want to
follow future versions carefully to make sure you aren't bitten by API
changes as thing are flushed out.

=back
